---
import { Image } from "astro:assets";
import advertisingSvg from "@assets/images/services/imagen1.png";
import designSvg from "@assets/images/services/imagen2.png";
import mobileSvg from "@assets/images/services/imagen3.png";
import websiteSvg from "@assets/images/services/imagen1.png";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { class: className } = Astro.props;

const points = [
	{
		title: t("websites.title"),
		content: t("websites.content"),
		image: websiteSvg,
	},
	{
		title: t("apps.title"),
		content: t("apps.content"),
		image: mobileSvg,
	},
	{
		title: t("uiux.title"),
		content: t("uiux.content"),
		image: designSvg,
	},
	{
		title: t("advertising.title"),
		content: t("advertising.content"),
		image: advertisingSvg,
	},
];
---

<section id="services" class:list={["section home-dark-section services-section relative", className]}>
	<div class="wrapper relative col-span-12 h-screen w-full">
		<h2 class="sr-only">{t("homepage")}</h2>

		<!-- Indicadores -->
		<div class="indicators absolute left-0 top-0 mt-[10vh] hidden h-[80vh] w-1 flex-col justify-between gap-2">
			{points.map(() => <div class="indicator w-full grow bg-[#333333]" />)}
		</div>

		<!-- Puntos de servicio -->
		{points.map(({ title, content, image }) => (
			<div class="point flex h-screen w-full flex-col items-center justify-center gap-x-20 gap-y-12 p-16 pr-0 md:flex-row lg:gap-x-40">
				<div class="w-full max-w-80 lg:block">
					<img src={typeof image === "string" ? image : image.src} alt={title} class="w-full h-auto" />
				</div>
				<article class="flex flex-col gap-14">
					<h3 class="faq font-display text-4xl uppercase md:text-5xl lg:text-6xl">{title}</h3>
					<p class="max-w-2xl text-lg" set:html={content} />
				</article>
			</div>
		))}
	</div>
</section>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { MorphSVGPlugin } from "gsap/MorphSVGPlugin";

	gsap.registerPlugin(ScrollTrigger, MorphSVGPlugin);

	function init() {
		// Tipamos correctamente los elementos
		const points = gsap.utils.toArray<HTMLElement>(".point");
		const indicators = gsap.utils.toArray<HTMLElement>(".indicator");

		const totalHeight = 100 * points.length;

		// Mostrar indicadores
		gsap.set(".indicators", { display: "flex" });

		// Ocultar todos los puntos excepto el primero
		points.forEach((elem, i) => {
			gsap.set(elem, { position: "absolute", top: 0, left: 0, autoAlpha: i === 0 ? 1 : 0 });
		});

		const tl = gsap.timeline({
			scrollTrigger: {
				trigger: "#services",
				start: "top top",
				end: "+=" + totalHeight + "%",
				scrub: 0.5,
				pin: ".services-section .wrapper",
				pinSpacing: true,
				markers: false,
			},
		});

		points.forEach((elem, i) => {
			// Fade in
			tl.to(elem, { autoAlpha: 1, duration: 0.5 }, i);
			tl.to(indicators[i], { backgroundColor: "white", duration: 0.25 }, i);

			if (i !== points.length - 1) {
				// Fade out antes del siguiente
				tl.to(elem, { autoAlpha: 0, duration: 0.5 }, i + 0.75);
				tl.to(indicators[i], { backgroundColor: "#333333", duration: 0.25 }, i + 0.75);
			}
		});
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>

