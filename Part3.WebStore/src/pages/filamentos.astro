---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Title from "@components/global/Title.astro";
import axios from "axios";

interface Marca {
  id: number;
  nombre: string;
}

interface Filamento {
  id: number;
  nombre: string;
  precio: number;
  stock: number;
  estado: boolean;
  color: string;
  imagenUrl: string;
  marcaId: number;
  tipoMaterialId?: number | null;
  peso?: number | null;
  tipoMaterial?: { id: number; nombre: string; } | null;
  marcaNombre?: string;
}

const FILAMENTO_URL = import.meta.env.FILAMENTO_URL;
const MARCA_URL = import.meta.env.MARCA_URL;
const API_KEY = import.meta.env.API_KEY;

let filamentos: Filamento[] = [];
let marcas: Marca[] = [];

try {
  const [filamentoRes, marcaRes] = await Promise.all([
    axios.get<Filamento[]>(FILAMENTO_URL, { headers: { "x-api-key": API_KEY } }),
    axios.get<Marca[]>(MARCA_URL, { headers: { "x-api-key": API_KEY } })
  ]);

  filamentos = filamentoRes.data;
  marcas = marcaRes.data;
} catch (err) {
  console.error(err);
}

filamentos = filamentos.map(f => ({
  ...f,
  marcaNombre: marcas.find(m => m.id === f.marcaId)?.nombre || "Desconocida"
}));
---

<BaseLayout>
  <section class="catalog-section px-6 py-24 sm:py-32 lg:px-8 bg-gray-50">
    <div class="mx-auto max-w-5xl text-center">
      <Title
        class="pb-6 uppercase"
        title="Nuestros Filamentos"
        subtitle="Explora nuestra variedad de filamentos disponibles en stock"
      />

      <!-- Buscador -->
      <div class="mb-12">
        <input 
          id="searchInput"
          type="text"
          placeholder="Buscar filamentos por nombre o marca..."
          class="w-full max-w-md mx-auto px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-sm"
        />
      </div>

      <!-- Grilla de productos -->
      <div id="filamentoGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 mt-6">
        {filamentos.map(f => (
          <div class="relative bg-white rounded-[20px] shadow-lg p-6 flex flex-col items-center text-center hover:shadow-2xl transform hover:-translate-y-1 hover:scale-105 transition-all duration-300">
            
            <span class={`absolute top-4 right-4 px-3 py-1 text-xs font-semibold rounded-full ${
              f.stock > 0 ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
            }`}>
              {f.stock > 0 ? "En stock" : "Agotado"}
            </span>

            <div class="w-32 h-32 mb-4 flex items-center justify-center overflow-hidden rounded-xl">
              <img src={f.imagenUrl} alt={f.nombre} class="object-contain w-full h-full" />
            </div>

            <h3 class="text-base font-bold text-stone-900 mb-1">{f.nombre}</h3>
            <p class="text-xs text-stone-400 mb-2">Marca: {f.marcaNombre}</p>              
            <p class="text-base font-semibold text-green-800 mb-2">${f.precio.toFixed(2)}</p>

            <button
              class="btn-add mt-3 px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-lg hover:bg-indigo-700"
              data-id={f.id}
              data-nombre={f.nombre}
              data-precio={f.precio}
              data-imagen={f.imagenUrl}
              data-marca={f.marcaNombre}
            >
              Agregar al carrito
            </button>

          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Contenedor de notificaciones -->
  <div id="toastContainer"></div>

  <script>
    // --- Mostrar notificaciÃ³n con animaciÃ³n ---
    function showToast(message: string | null) {
      const container = document.getElementById("toastContainer");
      if (!container) return;

      const toast = document.createElement("div");
      toast.className = "toast";
      toast.textContent = message;

      container.appendChild(toast);

      // Forzar animaciÃ³n de entrada
      requestAnimationFrame(() => {
        toast.classList.add("show");
      });

      // Se oculta a los 3s
      setTimeout(() => {
        toast.classList.remove("show");
        toast.classList.add("hide");
        toast.addEventListener("animationend", () => toast.remove());
      }, 3000);
    }

    // --- Carrito ---
    function agregarAlCarrito(id: number, nombre: any, precio: number, imagenUrl: any, marca: any) {
      let carrito = JSON.parse(localStorage.getItem("carrito") || "[]");

      const item = carrito.find((p: { productoId: any; }) => p.productoId === id);
      if (item) {
        item.cantidad++;
      } else {
        carrito.push({ productoId: id, nombre, precio, cantidad: 1, imagenUrl, marca });
      }

      localStorage.setItem("carrito", JSON.stringify(carrito));
      showToast(`${nombre} agregado al carrito ðŸ›’`);
    }

    // --- Eventos botones ---
    document.querySelectorAll<HTMLButtonElement>(".btn-add").forEach(btn => {
      btn.addEventListener("click", () => {
        const b = btn;
        const id = Number(b.dataset.id);
        const nombre = b.dataset.nombre ?? "";
        const precio = Number(b.dataset.precio);
        const imagenUrl = b.dataset.imagen ?? "";
        const marca = b.dataset.marca ?? "";
        agregarAlCarrito(id, nombre, precio, imagenUrl, marca);
      });
    });

    // --- Buscador ---
    const searchInput = document.getElementById("searchInput") as HTMLInputElement | null;
    const grid = document.getElementById("filamentoGrid") as HTMLElement | null;

    if (searchInput && grid) {
      const cards = Array.from(grid.children) as HTMLElement[];

      searchInput.addEventListener("input", () => {
        const query = searchInput.value.toLowerCase(); // âœ… ahora TS sabe que es un input
        cards.forEach(card => {
          const nombre = card.querySelector("h3")?.textContent?.toLowerCase() ?? "";
          const marca = card.querySelector("p")?.textContent?.toLowerCase() ?? "";
          card.style.display = nombre.includes(query) || marca.includes(query) ? "" : "none";
        });
      });
    }

  </script>
</BaseLayout>

<style>
.catalog-section { background-color: #f8f9fa; }
.catalog-section .grid div { font-family: inherit; }

/* --- Toast global styles --- */
:global(#toastContainer) {
  position: fixed;
  top: 1rem;
  right: 1rem;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

:global(.toast) {
  background: #4f46e5;
  color: white;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  box-shadow: 0 4px 10px rgba(0,0,0,0.15);
  opacity: 0;
  transform: translateX(100%);
}

/* Entrada */
@keyframes slideIn {
  from { opacity: 0; transform: translateX(100%); }
  to   { opacity: 1; transform: translateX(0); }
}

/* Salida */
@keyframes slideOut {
  from { opacity: 1; transform: translateX(0); }
  to   { opacity: 0; transform: translateX(100%); }
}

:global(.toast.show) {
  animation: slideIn 0.4s ease forwards;
}

:global(.toast.hide) {
  animation: slideOut 0.4s ease forwards;
}
</style>
